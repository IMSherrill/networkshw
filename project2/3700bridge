#!/usr/bin/python -u    
# The -u makes output unbuffered, so it will show up immediately
import sys
import socket
import select
import threading
import json
import datetime

class TableEntry:
        def __init__(self, host, port):
                self.createdAt = datetime.datetime.now()
                self.port = port
                self.host = host
 
# pads the name with null bytes at the end
def pad(name):
        result = '\0' + name
        while len(result) < 108:
                result += '\0'
        return result

 
if __name__ == "__main__":
        
        id = sys.argv[1]
        LAN = sys.argv[2:]
        sockets = []

        LANPortNumber = 1
        socketIDdict = {}

        rootID = id
        cost = 0
        rootPortID = 0
        rootPort = False

        forwardingTable = []
        enabledPorts = []
        disabledPorts = []
        BPDUReceivedAt ={}

        timeBroadCastBPDU = datetime.datetime.now() - datetime.timedelta(0,10,0)
        timeClearedOldEntries = datetime.datetime.now()

        def broadcastBPDU():                
                BPDU = {"source": id, 
                        "dest": "---", 
                        "type": "bpdu",
                        "message":{     "id":id, 
                                        "root":rootID,
                                        "cost":cost
                                  }
                        }

                json_bpdu = json.dumps(BPDU)

                for socket in sockets:
                        socket.send(json_bpdu)

                

        def removeOldEntries():
                now = datetime.datetime.now()
                for row in forwardingTable:
                        if (now - row.createdAt).seconds > 5:
                                forwardingTable.remove(row)

        def useNewBPDU(bpdu, socket):
            rootID = bpdu['root']
            print "New root: {}/{}".format(id, rootID)
            cost = bpdu['cost'] + 1
            rootPortID = bpdu['id']
            rootPort = socket
            # is that the designated port?
            print "Designated Port: {}".format(socketIDdict.get(rootPort))


        def printForwardingTable():
            print id
            for row in forwardingTable:
                print "{} {}".format(row.host, socketIDdict.get(row.port))

        def portEnable(port):
            if port in enabledPorts:
                print "port {} already enabled".format(socketIDdict.get(port))
            else:
                disabledPorts.remove(port)
                enabledPorts.append(port)
                print "Enabled port: {}".format(socketIDdict.get(port))


        def portDisable(port, message=""):
            if port in disabledPorts:
                print "port {} already disabled".format(socketIDdict.get(port))
            else:
                enabledPorts.remove(port)
                disabledPorts.append(port)
                print "Disabled port: {} {}".format(socketIDdict.get(port), message)


                

        # creates sockets and connects to them
        for x in range(len(LAN)):
                s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
                s.connect(pad(LAN[x]))
                sockets.append(s)
        
        print "Bridge " + id + " starting up\n"
        
        disabledPorts = list(sockets)
        broadcastBPDU()
        removeOldEntries()
 
        # Main loop
        while True:
                # Calls select with all the sockets; change the timeout value (1)
                ready, ignore, ignore2 = select.select(sockets, [], [], 1)

                if (datetime.datetime.now() - timeBroadCastBPDU) > datetime.timedelta(seconds=.5):
                    timeBroadCastBPDU = datetime.datetime.now()
                    broadcastBPDU()


                if (datetime.datetime.now() - timeClearedOldEntries) > datetime.timedelta(seconds=5):
                    timeClearedOldEntries = datetime.datetime.now()
                    removeOldEntries()


                # Reads from each fo the ready sockets
                for socket in ready:

                    if not socketIDdict.get(socket):
                        socketIDdict[socket] = "{}:{}".format(id,LANPortNumber)
                        LANPortNumber += 1


                    json_data = socket.recv(1500)

                    data = json.loads(json_data)

                    bpdu = False

                    if data['type'] == "bpdu":
                            BPDUReceivedAt[socket] = datetime.datetime.now();

                            bpdu = data['message']

                            if bpdu['root'] < rootID:
                                    useNewBPDU(bpdu=bpdu, socket=socket)
                            elif bpdu['root'] == rootID and bpdu['cost'] < cost:
                                    useNewBPDU(bpdu=bpdu, socket=socket)
                            elif bpdu['root'] == rootID and bpdu['cost'] == cost and bpdu['id'] < id:
                                    useNewBPDU(bpdu=bpdu, socket=socket)


                    #####################
                    ##### THIS ##########
                    #####################
                    # there will be a period at startup where messages dont get sent is this ok -- how long before first message gets sent?
                    # also where should this block be?
                    for s in sockets:
                        if s not in enabledPorts:
                            #did not receive bpdu on that port

                            if BPDUReceivedAt.get(s):
                                # Additionally, you should "timeout" BPDUs after 750 ms. 
                                # I think this means if its too old assume that port is gone ? not sure
                                pass
                            else: # never received bpdu, keep on cuz might be direct connect to LAN
                                portEnable(port=s)

                            #port is a rootPort
                            if s == rootPort:
                                portEnable(port=s)

                            #all other bridges on that LAN have a longer path to the root, or their bridge ID is higher than yours (I think those will be the same?)


                    if data['type'] == "data":
                            print "Received message {} on port {} from {} to {}".format(data['message']['id'], socketIDdict.get(socket), data['source'], data['dest'])
                            #if we receive a socket from a disabled port, drop the message
                            if socket not in enabledPorts:
                                print "Not forwarding message {}".format(data['message']['id'])
                                continue

                            hostIsInTable = False
                            for row in forwardingTable:
                                    if data['source'] == row.host:
                                            hostIsInTable = True

                                            #if host is in table but with a different port, disable that port
                                            if not row.port == socket:
                                                portDisable(port=row.port)
  
                            if not hostIsInTable: #add it to forwarding table
                                    newEntry = TableEntry(host=data['source'], port=socket)
                                    forwardingTable.append(newEntry)



                            destIsInTable = False
                            for row in forwardingTable:
                                    if data['dest'] == row.host:
                                            destIsInTable = True
                                            if row.port in enabledPorts and not row.port == socket:
                                                print "Forwarding message {} to port {}".format(data['message']['id'], socketIDdict.get(socket))
                                                row.port.send(json_data)
                                                break

                            if not destIsInTable: #send it to all enabled ports
                                    print "Broadcasting message {} to all ports".format(data['message']['id'])
                                    for s in sockets:
                                        if s in enabledPorts and not s == socket:
                                                s.send(json_data)


                    



                                
                #TODO: disabling ports
                #TODO: if a port hasnt received a bpdu in a certina amount of time (check the site) disable
                #TODO: address ffff should be received by all hosts and bridges



                # when does the bridge decide to start shutting off ports?



# Form a spanning tree in order to prevent packet loops
# Handle the failure of bridges, the failure of bridge ports, and the introduction of new bridges and LANs over time
# Learn the locations of end hosts
# Deliver end host packets to the destination
# Handle the mobility of end hosts between LANs
# Senders and receivers must print out specified debugging messages to STDOUT
# Your program must be called 3700bridge
# You should implement a simplified version of the standard bridge spanning tree protocol that we discussed in class. Note that more sophisticated and properly tuned algorithms (i.e., those which perform better) will be given higher credit. For example, some desired properties include (but are not limited to):
# Fast convergence: Require little time to form a spanning tree.
# Low overhead: Reduce packet flooding when possible.

